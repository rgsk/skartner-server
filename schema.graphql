### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthenticateResponse {
  message: String!
}

input EnumGreWordStatusFilter {
  equals: GreWordStatus
  in: [GreWordStatus!]
  not: GreWordStatus
  notIn: [GreWordStatus!]
}

type GptPrompt {
  createdAt: String!
  editedResponse: String
  greWord: GreWord
  greWordId: String
  id: String!
  input: String!
  meta: Json!
  response: String!
  updatedAt: String!
  user: User
  userId: String
}

type GreConfiguration {
  defaultGreWordSearchPromptInputs: [String!]!
}

type GreWord {
  createdAt: String!
  gptPrompts: [GptPrompt!]!
  greWordTags: [GreWordTag!]
  id: String!
  meta: Json!
  spelling: String!
  status: GreWordStatus!
  updatedAt: String!
  user: User
  userId: String
}

input GreWordOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  spelling: SortOrder
  updatedAt: SortOrder
}

type GreWordSearchPromptInput {
  createdAt: String!
  id: String!
  meta: Json!
  text: String!
  updatedAt: String!
}

input GreWordSearchPromptInputWhereInput {
  id: StringFilter
  text: StringFilter
  users: UserListRelationFilter
}

input GreWordSpellingUserIdCompoundUniqueInput {
  spelling: String!
  userId: String!
}

enum GreWordStatus {
  ALMOST_LEARNT
  FINISHED_LEARNING
  MASTERED
  MEMORY_MODE
  STARTED_LEARNING
  STILL_LEARNING
}

type GreWordTag {
  createdAt: String!
  greWords: [GreWord!]!
  id: String!
  meta: Json!
  name: String!
  updatedAt: String!
  user: User!
  userId: String!
}

input GreWordTagListRelationFilter {
  every: GreWordTagWhereInput
  none: GreWordTagWhereInput
  some: GreWordTagWhereInput
}

input GreWordTagNameUserIdCompoundUniqueInput {
  name: String!
  userId: String!
}

input GreWordTagWhereInput {
  id: StringFilter
  name: StringFilter
  userId: StringFilter
}

input GreWordTagWhereUniqueInput {
  id: String
  name_userId: GreWordTagNameUserIdCompoundUniqueInput
}

input GreWordWhereInput {
  greWordTags: GreWordTagListRelationFilter
  id: StringFilter
  spelling: StringFilter
  status: EnumGreWordStatusFilter
  user: UserWhereInput
  userId: StringFilter
}

input GreWordWhereUniqueInput {
  id: String
  spelling_userId: GreWordSpellingUserIdCompoundUniqueInput
}

type HelloWorld {
  message: String!
}

"""The `Json` scalar type represents JSON objects."""
scalar Json

type Mutation {
  createDraft(body: String!, title: String!): Post
  createGptPrompt(greWordId: String!, input: String!, response: String!): GptPrompt!
  createGreWord(greWordTags: [GreWordTagWhereUniqueInput], promptInput: String!, promptResponse: String!, spelling: String!, status: GreWordStatus, userId: String!): GreWord!
  createGreWordSearchPromptInput(text: String!, userId: String!): GreWordSearchPromptInput!
  createGreWordTag(name: String!, userId: String!): GreWordTag!
  createNotification(message: String!, userId: String!): Notification!
  createUser(email: String!, meta: UserMetaParsedJsonValueInput): User!
  deleteGptPrompt(id: String!): GptPrompt
  deleteGreWord(id: String!): GreWord
  deleteGreWordTag(name: String!, userId: String!): GreWordTag!
  publish(draftId: String!): Post
  updateGptPrompt(editedResponse: String, id: String!): GptPrompt
  updateGreWord(greWordTags: [GreWordTagWhereUniqueInput], id: String!, status: GreWordStatus): GreWord
  updateGreWordSearchPromptInput(connectedUserId: String, disconnectedUserId: String, id: String!, text: String): GreWordSearchPromptInput
  updateUser(email: String, id: String, meta: UserMetaParsedJsonValueInput): User
}

type Notification {
  message: String!
  userId: String!
}

type Post {
  body: String
  createdAt: String!
  id: String!
  isPublished: Boolean
  title: String
  updatedAt: String!
}

type Query {
  allPosts(isPublished: Boolean!, token: String): [Post]
  authenticate: AuthenticateResponse!
  drafts: [Post]
  gptPrompts(skip: Int, take: Int): [GptPrompt]
  greConfiguration: GreConfiguration!
  greWord(where: GreWordWhereUniqueInput): GreWord
  greWordSearchPromptInputs(skip: Int, take: Int, where: GreWordSearchPromptInputWhereInput): [GreWordSearchPromptInput!]!
  greWordTags(skip: Int, take: Int, where: GreWordTagWhereInput): [GreWordTag!]!
  greWords(orderBy: [GreWordOrderByWithRelationInput], skip: Int, take: Int, where: GreWordWhereInput): [GreWord!]!
  greWordsCount(where: GreWordWhereInput): Int!
  hello: HelloWorld!
  posts: [Post]
  sendSinglePrompt(indexesReturned: [Int!], input: String!, resultIndexFromCache: Int, skipCache: Boolean): SendSinglePromptResponse!
  user(where: UserWhereUniqueInput!): User
  userSession(where: UserSessionWhereUniqueInput!): UserSession
  userSessions(orderBy: [UserSessionOrderByWithRelationInput], skip: Int, take: Int, where: UserSessionWhereInput): [UserSession!]!
  userSessionsCount(where: UserSessionWhereInput): Int!
  users(orderBy: [UserOrderByWithRelationInput], skip: Int, take: Int, where: UserWhereInput): [User!]!
  usersCount(where: UserWhereInput): Int!
  wordsAndResponsesForPrompt(prompt: String!): [WordAndResponses!]!
}

type SendSinglePromptResponse {
  error: String
  result: String
  resultIndex: Int
  totalResultsInCache: Int!
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Subscription {
  notificationReceived(userId: String!): Notification
  truths: Boolean
}

type User {
  createdAt: String!
  email: String!
  gptPrompts: [GptPrompt!]!
  greWordSearchPromptInputs: [GreWordSearchPromptInput!]!
  greWordTags: [GreWordTag!]!
  greWords: [GreWord!]!
  id: String!
  meta: UserMetaParsedJsonValue!
  updatedAt: String!
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

type UserMetaParsedJsonValue {
  defaultGreWordSearchPromptInput: String
  showDefaultGreWordSearchPromptInputs: Boolean
}

input UserMetaParsedJsonValueInput {
  defaultGreWordSearchPromptInput: String
  showDefaultGreWordSearchPromptInputs: Boolean
}

input UserOrderByWithRelationInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

type UserSession {
  duration: Int
  endedAt: String
  id: String!
  meta: UserSessionMetaParsedJsonValue!
  startedAt: String!
  user: User!
  userId: String!
}

type UserSessionMetaParsedJsonValue {
  none: String
}

input UserSessionMetaParsedJsonValueInput {
  none: String
}

input UserSessionOrderByWithRelationInput {
  duration: SortOrder
  endedAt: SortOrder
  id: SortOrder
  startedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input UserSessionWhereInput {
  id: StringFilter
  user: UserWhereInput
  userId: StringFilter
}

input UserSessionWhereUniqueInput {
  id: String
}

input UserWhereInput {
  email: StringFilter
  id: StringFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}

type WordAndResponses {
  responses: [String]!
  word: String!
}