// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id          String  @id @default(uuid())
  title       String
  body        String
  isPublished Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Posts")
}

enum GreWordStatus {
  STARTED_LEARNING
  STILL_LEARNING
  ALMOST_LEARNT
  FINISHED_LEARNING
  MEMORY_MODE
  MASTERED
}

model GreWord {
  id         String        @id @default(uuid())
  spelling   String
  status     GreWordStatus @default(STARTED_LEARNING)
  gptPrompts GptPrompt[]

  meta      Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  greWordTags GreWordTag[]

  @@unique([spelling, userId])
  @@map("GreWords")
}

model GptPrompt {
  id             String  @id @default(uuid())
  input          String
  response       String
  editedResponse String?

  meta      Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  greWord   GreWord? @relation(fields: [greWordId], references: [id])
  greWordId String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@map("GptPrompts")
}

model GreWordTag {
  id   String @id @default(uuid())
  name String @unique

  user   User   @relation(fields: [userId], references: [id])
  userId String

  greWords GreWord[]

  meta      Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("GreWordTags")
}

model User {
  id                        String                     @id @default(uuid())
  email                     String                     @unique
  greWordSearchPromptInputs GreWordSearchPromptInput[]

  meta      Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  greWords     GreWord[]
  gptPrompts   GptPrompt[]
  greWordTags  GreWordTag[]
  userSessions UserSession[]

  relationRoleToUserAsUser          RelationRoleToUser[]       @relation("User")
  relationRoleToUserAsAssigner      RelationRoleToUser[]       @relation("Assigner")
  relationPermissionToUserAsUser    RelationPermissionToUser[] @relation("User")
  relationPermissionToUserAsGranter RelationPermissionToUser[] @relation("Granter")
  relationPermissionToRoleAsGranter RelationPermissionToRole[]

  @@map("Users")
}

model GreWordSearchPromptInput {
  id String @id @default(uuid())

  text   String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  meta      Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("GreWordSearchPromptInputs")
}

model UserSession {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  startedAt DateTime  @default(now())
  endedAt   DateTime?
  duration  Int?
  meta      Json      @default("{}")

  @@map("UserSessions")
}

model Cache {
  id                  String    @id @default(uuid())
  key                 Json      @unique
  value               Json
  expirationTimestamp DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Role {
  id                             String                     @id @default(uuid())
  name                           String                     @unique
  meta                           Json                       @default("{}")
  createdAt                      DateTime                   @default(now())
  updatedAt                      DateTime                   @updatedAt
  relationRoleToUserAsRole       RelationRoleToUser[]
  relationPermissionToRoleAsRole RelationPermissionToRole[]

  @@map("Roles")
}

model RelationRoleToUser {
  roleId     String
  role       Role     @relation(fields: [roleId], references: [id])
  userId     String
  user       User     @relation(name: "User", fields: [userId], references: [id])
  assignedAt DateTime @default(now())
  assignerId String
  assigner   User     @relation(name: "Assigner", fields: [assignerId], references: [id])

  @@id([roleId, userId])
}

model Permission {
  id                                   String                     @id @default(uuid())
  name                                 String                     @unique
  meta                                 Json                       @default("{}")
  createdAt                            DateTime                   @default(now())
  updatedAt                            DateTime                   @updatedAt
  relationPermissionToUserAsPermission RelationPermissionToUser[]
  relationPermissionToRoleAsPermission RelationPermissionToRole[]
  permissionHierarchyAsChild           PermissionHierarchy[]      @relation("Child")
  permissionHierarchyAsParent          PermissionHierarchy[]      @relation("Parent")

  @@map("Permissions")
}

model RelationPermissionToUser {
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id])
  userId       String
  user         User       @relation(name: "User", fields: [userId], references: [id])
  granterId    String
  granter      User       @relation(name: "Granter", fields: [granterId], references: [id])
  isAllowed    Boolean?

  @@id([permissionId, userId])
}

model RelationPermissionToRole {
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id])
  roleId       String
  role         Role       @relation(fields: [roleId], references: [id])
  granterId    String
  granter      User       @relation(fields: [granterId], references: [id])
  isAllowed    Boolean?

  @@id([permissionId, roleId])
}

model PermissionHierarchy {
  parentPermissionId String
  parentPermission   Permission @relation("Parent", fields: [parentPermissionId], references: [id])
  childPermissionId  String
  childPermission    Permission @relation("Child", fields: [childPermissionId], references: [id])

  @@id([parentPermissionId, childPermissionId])
}

model CricketPlayer {
  id     String @id @default(uuid())
  dataId Int    @unique()
  name   String
}
